<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://fade-color.github.io</id>
    <title>七年的万事屋</title>
    <updated>2021-04-17T11:13:57.584Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://fade-color.github.io"/>
    <link rel="self" href="https://fade-color.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://fade-color.github.io/images/avatar.png</logo>
    <icon>https://fade-color.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 七年的万事屋</rights>
    <entry>
        <title type="html"><![CDATA[Numpy基本操作]]></title>
        <id>https://fade-color.github.io/post/numpy-ji-ben-cao-zuo/</id>
        <link href="https://fade-color.github.io/post/numpy-ji-ben-cao-zuo/">
        </link>
        <updated>2021-04-17T10:55:14.000Z</updated>
        <content type="html"><![CDATA[<h3 id="1-数组创建">1. 数组创建</h3>
<p>numpy中所有的计算都是围绕着数组进行的，因此在运算之前，我们需要将计算的数据表示成数组的形式。</p>
<ul>
<li>
<p>我们可以用<code>np.array()</code>来创建一个数组：</p>
<pre><code class="language-python">np.array([1, 2, 3, 4, 5])
# array([1, 2, 3, 4, 5])
</code></pre>
</li>
<li>
<p><code>np.zeros()</code>创建一个全为零的数组：</p>
<pre><code class="language-python">np.zeros((2, 3))  # 参数为元组，表示2行3列

# array([[0., 0.],
#        [0., 0.],
#        [0., 0.]])
</code></pre>
</li>
<li>
<p>类似地，可以使用<code>np.ones()</code>创建一个全为1的数组：</p>
<pre><code class="language-python">np.ones((2, 4))

# array([[1., 1., 1., 1.],
#        [1., 1., 1., 1.]])
</code></pre>
</li>
<li>
<p>使用<code>np.arange()</code>创建一个递增或递减的数列，类似于python的<code>range()</code>。</p>
<pre><code class="language-python">np.arange(3, 7)  # [3, 7)
# array([3, 4, 5, 6])
np.arange(3, 10, 2)
# array([3, 5, 7, 9])
np.arange(10, 2, -3)
#array([10,  7,  4])
</code></pre>
</li>
<li>
<p><code>np.linspace()</code>会返回介于某个区间等间距分布的数，前两个参数是区间的范围，第三个参数是输出样本的总数：</p>
<pre><code class="language-python"># 返回一个0-1范围内等间距分布的5个数
np.linspace(0, 1, 5)
# array([0.  , 0.25, 0.5 , 0.75, 1.  ])
</code></pre>
</li>
<li>
<p>通过<code>np.random.rand()</code>生成随机的数组(数字范围0-1)：</p>
<pre><code class="language-python">np.random.rand(2, 4)
# array([[0.90823579, 0.13280413, 0.48167232, 0.47886157],
#        [0.73089321, 0.39703329, 0.09461766, 0.5481924 ]])
</code></pre>
</li>
<li>
<p>在numpy中，数组默认的数据类型是64位的浮点数：</p>
<pre><code class="language-python">a = np.zeros((2, 4))
a.dtype
# dtype('float64')
</code></pre>
</li>
<li>
<p>可以在创建数组时，通过<code>dtype</code>指定其他的数据类型：</p>
<pre><code class="language-python">a = np.zeros((2, 4), dtype=np.int32)
a.dtype
# dtype('int32')
</code></pre>
<p>也可以通过<code>araay.astype()</code>来转换数据类型：</p>
<pre><code class="language-python">b = a.astype(int)
b
# array([[0, 0, 0, 0],
#        [0, 0, 0, 0]])
</code></pre>
</li>
</ul>
<h3 id="2-基本运算">2. 基本运算</h3>
<p>在numpy中我们可以轻松地对数组进行常见的数学运算。</p>
<ul>
<li>
<p>两个相同尺寸的数组可以直接进行四则运算，它会将数组同位置的元素进行加减乘除：</p>
<pre><code class="language-python">a = np.array([1, 2, 3])
b = np.array([4, 5, 6])
a + b
# array([5, 7, 9])
a / b
# array([0.25, 0.4 , 0.5 ])
</code></pre>
</li>
<li>
<p>在乘法运算中还有一个点乘<code>np.dot()</code>，这个函数会对两个向量进行点乘运算：</p>
<pre><code class="language-python">np.dot(a, b)
# 32
</code></pre>
</li>
<li>
<p>与之类似的还有矩阵乘法<code>np.matmul()</code></p>
<pre><code class="language-python">a = np.array([[1, 2],
              [3, 4]])
b = np.array([[2, 0],
              [0, 2]])
np.matmul(a, b)
a @ b
# array([[2, 4],
#        [6, 8]])
</code></pre>
</li>
<li>
<p>以下函数对数组中所有数依次运算：</p>
<table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">np.sqrt()</td>
<td style="text-align:center">开方</td>
</tr>
<tr>
<td style="text-align:center">np.sin(), np.cos(), np.tan()</td>
<td style="text-align:center">三角函数运算</td>
</tr>
<tr>
<td style="text-align:center">np.log()</td>
<td style="text-align:center">自然对数</td>
</tr>
<tr>
<td style="text-align:center">np.power()</td>
<td style="text-align:center">指数</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>广播：</p>
<pre><code class="language-python">a = np.array([1, 2, 3])
a * 5
# array([5, 10, 15])
</code></pre>
<p>不同维度的数组也可以进行直接运算</p>
<pre><code class="language-python">a = np.array([[1],
              [10],
              [20]])
b = np.array([0, 1, 2])
a + b
# array([[ 1,  2,  3],
#        [10, 11, 12],
#        [20, 21, 22]])
</code></pre>
<p>在运算之前，numpy会将这两个数组扩展至相同的尺寸，然后再将相同位置的元素相加</p>
<figure data-type="image" tabindex="1"><img src="https://i.loli.net/2021/03/22/3ZAxQgTJN6GhW4H.png" alt="222" loading="lazy"></figure>
</li>
<li>
<p>常用函数：</p>
<table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">min(), max()</td>
<td style="text-align:center">最小值，最大值</td>
</tr>
<tr>
<td style="text-align:center">argmin(), argmax()</td>
<td style="text-align:center">最小值，最大值的索引</td>
</tr>
<tr>
<td style="text-align:center">sum()</td>
<td style="text-align:center">求所有数据的总和</td>
</tr>
<tr>
<td style="text-align:center">mean()</td>
<td style="text-align:center">平均值</td>
</tr>
<tr>
<td style="text-align:center">median()</td>
<td style="text-align:center">中位数</td>
</tr>
<tr>
<td style="text-align:center">var()</td>
<td style="text-align:center">方差</td>
</tr>
<tr>
<td style="text-align:center">std()</td>
<td style="text-align:center">标准差</td>
</tr>
</tbody>
</table>
<p>对于上面的函数，如果数组为多维数组，可以通过指定axis来指定维度：</p>
<p>axis=0时，会将每一<strong>行</strong>中<strong>对应的数据</strong>相加，axis=0代表第一个维度，也就是行</p>
<figure data-type="image" tabindex="2"><img src="https://i.loli.net/2021/03/23/ztaGP1qy5TjViYX.png" alt="image-20210323091551739" loading="lazy"></figure>
<pre><code class="language-python">a = np.array([[1, 2, 3, 4, 5],
              [5, 6, 7, 8, 9]])
a.sum()  # 所有元素的和
# 50
a.sum(axis=0)  # 每行对应数据相加，也就是按列求和
# array([ 6,  8, 10, 12, 14])
</code></pre>
<p>以此类推，axis=1时代表第二个维度，也就是列</p>
<figure data-type="image" tabindex="3"><img src="https://i.loli.net/2021/03/23/PZ5OTM6wltbBmgF.png" alt="image-20210323091742759" loading="lazy"></figure>
<pre><code class="language-python">a.sum(axis=1)  # 每列对应数据相加，也就是按行求和
# array([15, 35])
</code></pre>
</li>
<li>
<p>获取元素</p>
<p>获取元素和python中list用法基本一致</p>
<pre><code class="language-python">a = np.array([[1, 2, 3],
              [4, 5, 6]])
# 获取第1行第2列的值
a[0, 1]  # a[0][1]同样
# 2
</code></pre>
<p>同样支持切片</p>
<pre><code class="language-python"># 获取第一行[0,2)列的数据
a[0, 0:2]  # a[0][0:2]
# array([1, 2])

# 获取第一行数据
a[0, :]  # a[0][:]
a[0]
# array([1, 2, 3])

# 获取第一行数据，间距为2
a[0, ::2]
# array([1, 3])

# 获取第一行数据，倒序，间距为2
a[0, ::-2]
# 等同于
a[0, -1:-4:-2]  # 倒数第一个到倒数第四个(不包括)，间距为2
# array([3, 1])

a[0, 3:0:-2]  # 从3到0(不包括0)，跨度为2
# array([3])
</code></pre>
</li>
<li>
<p>条件筛选指定元素</p>
<pre><code class="language-python">a = np.arange(10)
a
# array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

a &lt; 2
# array([ True,  True, False, False, False, False, False, False, False,
#        False])

a[a &lt; 2]
# array([0, 1])
</code></pre>
<p>还可以通过逻辑运算符组合不同的条件，需要注意的是，与运算使用“&amp;”，或运算使用“|”</p>
<pre><code class="language-python">a[(a &gt; 3) &amp; (a % 2 == 0)]
# array([4, 6, 8])

a[(a &lt; 5) | (a % 2 == 0)]
# array([0, 1, 2, 3, 4, 6, 8])
</code></pre>
<p>不能使用类似<code>2 &lt; a &lt; 5</code>这种条件筛选</p>
<pre><code class="language-python">a[(2 &lt; a &lt; 5) | (a % 2 == 0)]  # 报错
# ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()
</code></pre>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JupyterLab 显示中文字体]]></title>
        <id>https://fade-color.github.io/post/Jupyterlab-xian-shi-zhong-wen-zi-ti/</id>
        <link href="https://fade-color.github.io/post/Jupyterlab-xian-shi-zhong-wen-zi-ti/">
        </link>
        <updated>2021-04-17T09:28:28.000Z</updated>
        <content type="html"><![CDATA[<h3 id="查看当前系统jupyterlab支持的所有字体">查看当前系统JupyterLab支持的所有字体</h3>
<pre><code class="language-python">from matplotlib.font_manager import FontManager

mpl_fonts = set(f.name for f in FontManager().ttflist)

print('all font list get from matplotlib.font_manager:')
for f in sorted(mpl_fonts):
    print('\t' + f)
</code></pre>
<p>打印结果如下：</p>
<figure data-type="image" tabindex="1"><img src="https://i.loli.net/2021/04/17/y85rFj3HD6aTdsL.png" alt="image-20210417092307128" loading="lazy"></figure>
<p>选择一款中文字体即可，这里我选择的是苹果的冬青黑体：&quot;Hiragino Sans GB&quot;，windows用户可以选择黑体（SimHei）</p>
<h3 id="删除缓存文件">删除缓存文件</h3>
<p>Mac：</p>
<ul>
<li>
<pre><code class="language-bash">cd ~/.matplotlib
rm -r *
</code></pre>
</li>
</ul>
<p>Windows：</p>
<ul>
<li>
<p>进入到自己的用户目录文件夹下，在资源管理器的“查看”选项卡中勾选“显示隐藏文件及目录”即可看到<code>.matplotlib</code>文件夹，或者直接在资源管理器的路径栏中在路径后面手动输入<code>.matplotlib</code>后回车即可进入该文件夹</p>
</li>
<li>
<p>然后把该文件夹内的资源删除即可。</p>
</li>
</ul>
<h3 id="修改matplotlibrc配置文件">修改matplotlibrc配置文件</h3>
<p>Mac：</p>
<ul>
<li>
<p>输入<code>vim ~/.matplotlib/matplotlibrc</code>：</p>
<p>然后将文件内容修改为：</p>
<pre><code>font.family         : sans-serif
font.sans-serif         : Hiragino Sans GB
axes.unicode_minus  : False
</code></pre>
<p><code>font.sans-serif</code>后面改为自己选择的字体即可。</p>
</li>
</ul>
<p>Win：</p>
<ul>
<li>在<code>.matplotlib</code>文件夹中新建matplotlibrc文件，把上面内容粘贴进去后<code>.txt</code>后缀名删掉即可。</li>
</ul>
<h3 id="重启jupyterlab内核">重启JupyterLab内核</h3>
<p>接下来重启一下JupyterLab内核即可看到效果。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mac设置终端ssh自动登录]]></title>
        <id>https://fade-color.github.io/post/mac-she-zhi-zhong-duan-ssh-zi-dong-deng-lu/</id>
        <link href="https://fade-color.github.io/post/mac-she-zhi-zhong-duan-ssh-zi-dong-deng-lu/">
        </link>
        <updated>2021-04-05T09:32:37.000Z</updated>
        <content type="html"><![CDATA[<h3 id="1-安装expect">1. 安装expect</h3>
<pre><code class="language-bash">brew install expect
</code></pre>
<h3 id="2-编写expect登录脚本">2. 编写expect登录脚本</h3>
<p>输入 <code>touch login.exp</code> 新建脚本</p>
<p>接着输入 <code>vim ./login.exp</code> 编辑脚本，代码如下：</p>
<pre><code class="language-bash">#!/usr/bin/expect -f

# 定义第一个空格后的第一个变量是host
set hostname [lindex $argv 0]
# 定义第一个空格后的第二个变量是用户名
set username [lindex $argv 1]
# 定义第一个空格后的第三个变量是密码
set password [lindex $argv 2]
# 等待登录输入密码的时间，单位秒
set timeout 30
set force_conservative 1
if {$force_conservative} {
  set send_slow {128 .1}
}
# 执行登录ssh
spawn ssh $username@$hostname;

expect {
        # 出现yes/no 时输入yes
    &quot;yes/no&quot; {
    send -s &quot;yes\r&quot;; exp_continue
    }
    # 出现password 自动输入变量密码
    &quot;password&quot; {
        send -s &quot;$password\r&quot;;
    }
}
# 执行过后把权限交给终端
interact
</code></pre>
<p>这样就可以通过命令<code>expect ./login.exp IP地址 用户名 密码</code>来进行登录服务器了。</p>
<h3 id="3-编写bash脚本">3. 编写bash脚本</h3>
<p>分别输入</p>
<pre><code class="language-bash">touch sshlogin.sh
vim ./sshlogin.sh
</code></pre>
<p>在脚本中粘贴以下代码（注意修改脚本中的ip地址用户名密码信息）：</p>
<pre><code class="language-bash">#!/bin/bash

clear
RED='\033[0;31m'
GRN='\033[0;32m'
BLU='\033[0;34m'
NC='\033[0m'
# 获取执行login.exp路径
pwdpath=$(cd &quot;$(dirname &quot;$0&quot;)&quot;;pwd)
# ssh登录脚本指令, 注意这里要跟脚本命名要一致
ssh=&quot;expect $pwdpath/login.exp&quot;

# menu.sh

echo &quot;---------------------------------------------------------------&quot;
echo &quot;|              __                                             |&quot;
echo &quot;|            _/  |_  ____ ______      ____  __ __  ____       |&quot;
echo &quot;|            \   __\/  _ \\____ \    / ___\|  |  \/    \       |&quot;
echo &quot;|             |  | (  &lt;_&gt; )  |_&gt; &gt;  / /_/  &gt;  |  /   |  \     |&quot;
echo &quot;|             |__|  \____/|   __/   \___  /|____/|___|  /     |&quot;
echo &quot;|                         |__|     /_____/            \/      |&quot;
echo &quot;---------------------------------------------------------------&quot;

# 服务器提示目录，可以根据自己需求修改
echo &quot;--------------------------------------&quot;
echo &quot;please enter your Server:&quot;
echo -e &quot;(1) ${GRN}Linux Tencent qinian${NC}&quot;
echo &quot;(2) Linux Tencent(disabled)&quot;
echo &quot;(3) exit&quot;
echo &quot;--------------------------------------&quot;
read -p &quot;请选择服务器:&quot; input

case ${input} in
    1)
    echo -e &quot;${GRN}Linux Tencent qinian${NC}&quot;
    $ssh ip地址 用户名 密码
    sleep 1;;
    2)
    # echo -e &quot;${GRN}Linux Tencent${NC}&quot;
    # $ssh ip地址 用户名 密码
    sleep 1;;
    3)
    exit;;
esac
</code></pre>
<h3 id="4-修改脚本权限">4. 修改脚本权限</h3>
<pre><code class="language-bash">chmod 755 sshlogin.sh
</code></pre>
<p>修改完成后就可以使用 <code>./sshlogin.sh</code> 命令来执行脚本</p>
<h3 id="5-运行脚本">5. 运行脚本</h3>
<p>输入 <code>./sshlogin.sh</code> 命令来执行脚本，出现以下界面：</p>
<figure data-type="image" tabindex="1"><img src="https://i.loli.net/2021/03/25/zc7eWR25rCXOpZf.png" alt="image-20210325215920244" loading="lazy"></figure>
<p>输入序号后回车即可。</p>
<figure data-type="image" tabindex="2"><img src="https://i.loli.net/2021/03/25/t9L4fdlnYXF1hKR.png" alt="image-20210325220057506" loading="lazy"></figure>
]]></content>
    </entry>
</feed>